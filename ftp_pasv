package main

import (
	"fmt"
	"io"
	"log"
	"net"
	"strconv"
	"time"
	//"runtime"
	"bufio"
	"math/rand"
	"os"
	"strings"
	"sync"
	//"regexp"
)

type ftp_server struct {
	ip_port string //"10.80.222.35:36"
	name    string //"anonymous"
	passwd  string //"kevin@gmail.com"

	command_conn net.Conn //command connect
	err          error    //last status

	//the follow is for port mode
	local_port    int          //port for port mode,use array index
	data_listener net.Listener //listener for port mode
	data_conn     net.Conn     // data connect

	//the follow is for pasv mode
	data_ip_port string
}

type file struct {
	path string
	name string
}

func get_rand_int(max int) int {
	seed := rand.New(rand.NewSource(time.Now().UnixNano()))

	for i := 0; i < max; i++ {
		logger.Println(seed.Intn(max))
	}
	return seed.Intn(max)
}

func time_test() {
	t := time.Now()
	fmt.Println(t)
	fmt.Println(t)
	fmt.Println("%d\n", t.Year())
}

func ftpcmd_unblocked(cmd string, result []uint8, sock net.Conn) {

	//send cmd
	cmd += "\r\n"
	send_buf := []byte(cmd)
	buf_len := 0

	//fmt.Println("%s\n",send_buf)
	sock.SetDeadline(time.Now().Add(10000 * time.Millisecond))
	send_len, err := sock.Write(send_buf)
	if err != nil {
		logger.Fatal(err)
	}

	logger.Printf("send:%d,%s", send_len, send_buf[:])

	//loop read the result of cmd
	for {
		read_len, err := sock.Read(result[buf_len:])
		if err != nil {
			/*
				if err.Timeout() {
					logger.Printf("RECV time out")
					break
				}
			*/
			logger.Printf("read error")
			//logger.Fatal(err)
			return
		}
		if read_len == 0 {
			logger.Printf("read len is 0")
			return
		}
		logger.Printf("RECV:read_len %d,%s", read_len, result[buf_len:read_len])
		buf_len += read_len
	}
	//logger.Printf("RECV:%d,%q",read_len,result[:])
	logger.Printf("RECV:%d,%s", buf_len, result[:buf_len])
}

func ftpcmd(cmd string, result []uint8, sock net.Conn) {

	//send cmd
	cmd += "\r\n"
	send_buf := []byte(cmd)
	buf_len := 0

	send_len, err := sock.Write(send_buf)
	if err != nil {
		logger.Fatal(err)
	}

	logger.Printf("send:%d,%s", send_len, send_buf[:])

	//loop read the result of cmd
	read_len, err := sock.Read(result[buf_len:])
	if err != nil {
		logger.Printf("read error")
	}
	if read_len == 0 {
		logger.Printf("read len is 0")
	}
	buf_len += read_len
	logger.Printf("RECV:%d,%s", buf_len, result[:buf_len])
}

func init_data_port(data_port string) (net.Listener, error) {

	data_listener, err := net.Listen("tcp", data_port)
	if err != nil {
		logger.Fatal(err)
	}
	logger.Printf(" data port listen OK")

	return data_listener, err
}

func data_connect(data_listener net.Listener) (net.Conn, error) {

	data_conn, err := data_listener.Accept()
	if err != nil {
		logger.Fatal(err)
	}
	logger.Printf("data connect OK")

	return data_conn, err
}

//download file by port mode
func port_trans_file(file_name string, ftp *ftp_server) {

	read_buf := make([]uint8, 4096)

	//ftp := *cur_ftp

	ftp.data_listener, ftp.err = init_data_port(":" + strconv.Itoa(ftp.local_port))
	defer ftp.data_listener.Close()

	//ftp.command_conn.LocalAddr()==10.80.85.159:63863
	ip := strings.Split(ftp.command_conn.LocalAddr().String(), ":")

	//replace the . with ,
	ip[0] = strings.Replace(ip[0], ".", ",", -1)

	port := "," + strconv.Itoa(ftp.local_port>>8) + "," + strconv.Itoa(ftp.local_port&0X00ff)

	ftpcmd("PORT "+ip[0]+port, read_buf, ftp.command_conn)

	//accept data connct
	ftp.data_conn, ftp.err = data_connect(ftp.data_listener)

	//download file
	ftpcmd("RETR "+file_name, read_buf, ftp.command_conn)

	trans_file(file_name, ftp.data_conn)

	//recv cmd result
	cmd_recv_len, err := ftp.command_conn.Read(read_buf[:])
	if err != nil {
		logger.Printf("read error")
	}

	logger.Printf("RECV:%d,%s", cmd_recv_len, read_buf[:cmd_recv_len])

	ftp.local_port++

	return
}

func trans_file(file_name string, data_conn net.Conn) {

	var file_len int64

	read_buf := make([]uint8, 4096)

	start := time.Now()

	//data_conn.SetDeadline(time.Now().Add(1000 * time.Millisecond))

	write_file, write_err := os.OpenFile(file_name, os.O_WRONLY|os.O_CREATE, 0666)

	if write_err != nil {
		logger.Fatal(write_err)
	}

	defer data_conn.Close()
	defer write_file.Close()

	file_len = 0
	for {
		read_len, err := data_conn.Read(read_buf[:])
		if err == io.EOF {
			//logger.Printf("RECV end")
			break
		} else if err != nil {
			logger.Fatal(err)
		}

		//logger.Printf("RECV:%d,%s", read_len, read_buf[:read_len])
		write2file(read_buf, read_len, write_file)
		file_len += int64(read_len)

		//logger.Printf("recv write:%d", read_len)
	}

	end := time.Now()

	//d, _ := time.ParseDuration("-24h")
	//fmt.Println(k.Add(d))
	logger.Printf("download :%s :%d %s", file_name, file_len, end.Sub(start))

	return
}

func pasv_trans_file(ftp ftp_server, file_name string) {

	var file_len int64

	read_buf := make([]uint8, 4096)

	ftp.data_conn, ftp.err = net.Dial("tcp", ftp.data_ip_port)
	if ftp.err != nil {
		logger.Fatal(ftp.err)
	}

	//data_conn.SetDeadline(time.Now().Add(1000 * time.Millisecond))

	defer ftp.data_conn.Close()

	write_file, write_err := os.OpenFile(file_name, os.O_WRONLY|os.O_CREATE, 0666)

	if write_err != nil {
		logger.Fatal(write_err)
	}

	defer write_file.Close()

	file_len = 0
	for {
		read_len, err := ftp.data_conn.Read(read_buf[:])
		if err == io.EOF {
			//logger.Printf("RECV end")
			break
		} else if err != nil {
			logger.Fatal(err)
		}

		//logger.Printf("RECV:%d,%s", read_len, read_buf[:read_len])
		write2file(read_buf, read_len, write_file)
		file_len += int64(read_len)

		//logger.Printf("recv :%d write:%d", read_len, start)
	}

	logger.Printf("download :%s :%d", file_name, file_len)

	return
}

func write2file(buf []byte, length int, file *os.File) {
	//loop write file
	start := 0
	for {
		write_len, write_err := file.Write(buf[start:length])

		if write_err != nil {
			logger.Fatal(write_err)
		}

		start += write_len
		if start >= length {
			break
		}
	}
	return

}

var logger *log.Logger
var logfile *os.File

var file_list []file
var file_num int

func main() {

	var wait_ftp sync.WaitGroup

	logger, logfile = log_init()

	defer logfile.Close()

	server_list, num := get_server_list()

	file_list, file_num = get_file_list()

	fmt.Println(len(file_list))

	logger.Println(num)

	wait_ftp.Add(num + 1)

	for i := 0; i < num; i++ {
		//logger.Print("%d %s: %s: %s", i, server_list[i].ip_port, server_list[i].name, server_list[i].passwd)
		logger.Println(server_list[i])
		go ftp_main(server_list[i])
	}

	wait_ftp.Wait()
	//time.Sleep(1e10)

}

func get_server_list() ([]ftp_server, int) {

	server_list := make([]ftp_server, 60, 200)

	ini_file, err := os.Open("server.ini")

	if err != nil {
		logger.Fatal(err)
	}

	defer ini_file.Close()

	bio_reader := bufio.NewReader(ini_file)

	line := 0
	//loop read file
	for {

		buf, is_prefix, err := bio_reader.ReadLine()

		if err == io.EOF {
			//logger.Printf("read end")
			break
		} else if err != nil {
			logger.Fatal(err)
		}

		if is_prefix {
			logger.Printf("read is too long")
			break
		}

		//logger.Printf("read buf:%s",buf)

		//'#' is the sybol of coment,skip the comment
		if buf[0] == '#' {
			//logger.Printf("skip this line")
			continue
		}

		fmt.Sscanf(string(buf), "%s %s %s", &server_list[line].ip_port, &server_list[line].name, &server_list[line].passwd)
		server_list[line].local_port = 50000 + line*1000
		logger.Println(line, server_list[line].ip_port, server_list[line].name, server_list[line].passwd)

		line += 1

		if line >= 200 {
			logger.Fatal("line is beyond 200")
			break
		}
	}

	/*
		for i,v:=range server_list{
			fmt.Println(i,v)
		}
	*/

	return server_list, line

}

func get_file_list() ([]file, int) {
	file_list := make([]file, 60, 2000)

	ini_file, err := os.Open("file.ini")

	if err != nil {
		logger.Fatal(err)
	}

	//defer ini_file.Close()

	bio_reader := bufio.NewReader(ini_file)

	line := 0
	//loop read file
	for {

		buf, is_prefix, err := bio_reader.ReadLine()

		if err == io.EOF {
			//logger.Printf("read end")
			break
		} else if err != nil {
			logger.Fatal(err)
		}

		if is_prefix {
			logger.Printf("read is too long")
			break
		}

		//'#' is the sybol of coment,skip the comment
		if buf[0] == '#' {
			//logger.Printf("skip this line")
			continue
		}
		//分割文件名和路径名
		num := strings.LastIndex(string(buf), "/")
		file_list[line].path = string(buf[0:num])
		file_list[line].name = string(buf[num+1:])

		logger.Printf(":%s \t:%s\n", file_list[line].path, file_list[line].name)

		line++

	}

	/*
		for i, v := range file_list {
			fmt.Println(i, v)
		}
	*/

	return file_list, line

}

func log_init() (*log.Logger, *os.File) {
	logfile, err := os.OpenFile("ftp.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0)
	if err != nil {
		fmt.Printf("%s\r\n", err.Error())
		os.Exit(-1)
	}
	logger = log.New(logfile, "\r\n", log.Ldate|log.Lmicroseconds|log.Lshortfile)
	return logger, logfile

}

/*get the data ip and port from the recv buf*/
func get_ip_port_v1(recv_buf []uint8) string {
	var port_high int
	var port_low int
	var ip [4]int

	//raw_buf:=recv_buf[27:]

	//logger.Printf("raw_buf:%s",raw_buf)

	/*
	   ip_buf:=strings.Split(string(raw_buf),",")
	   logger.Printf("ip_buf:%s %s %s %s %s %s",ip_buf[0],ip_buf[1],ip_buf[2],ip_buf[3],ip_buf[4],ip_buf[5])
	*/

	/*227 Entering Passive Mode (10,80,222,35,216,4).*/
	fmt.Sscanf(string(recv_buf), "*(%d,%d,%d,%d,%d,%d)*", &ip[0], &ip[1], &ip[2], &ip[3], &port_high, &port_low)

	//fmt.sprintf(recv_buf,"*(%d,%d,%d,%d,%d,%d)*",&ip[0],&ip[1],&ip[2],&ip[3],&port_high,&port_low)

	//port_high,_=strconv.Atoi(ip_buf[4])
	//port_low,_=strconv.Atoi(ip_buf[5])

	logger.Printf("ip:%d %d %d %d port_high:%d port_low:%d", ip[0], ip[1], ip[2], ip[3], port_high, port_low)

	port := port_high*256 + port_low
	logger.Printf("port:%d", port)

	ip_port := strconv.Itoa(ip[0]) + "." + strconv.Itoa(ip[1]) + "." + strconv.Itoa(ip[2]) + "." + strconv.Itoa(ip[3]) + ":" + strconv.Itoa(port)
	logger.Printf("ip_port:%s", ip_port)
	return ip_port
}

/*get the data ip and port from the recv buf*/
func get_ip_port(recv_buf string) string {
	var port [2]int
	var ip [4]int

	//logger.Printf("recv_buf:%s",recv_buf)

	ip_buf1 := strings.Split(recv_buf, ")")
	ip_buf2 := strings.Split(ip_buf1[0], "(")
	//fmt.Printf("%v\n",ip_buf2)
	//logger.Printf("ip_buf2[1]:%s",ip_buf2[1])

	/*227 Entering Passive Mode (10,80,222,35,216,4).*/
	fmt.Sscanf(ip_buf2[1], "%d,%d,%d,%d,%d,%d", &ip[0], &ip[1], &ip[2], &ip[3], &port[0], &port[1])

	//fmt.Sprintf(ip_port,"%d.%d.%d.%d:%d",ip[0],ip[1],ip[2],ip[3],port[0]*0XFF+port[1])
	ip_port := strconv.Itoa(ip[0]) + "." + strconv.Itoa(ip[1]) + "." + strconv.Itoa(ip[2]) + "." + strconv.Itoa(ip[3]) + ":" + strconv.Itoa(port[0]*256+port[1])
	logger.Printf("ip port:%s", ip_port)
	return ip_port
}

func ftp_main(ftp ftp_server) {

	data := make([]uint8, 4096)
	read_buf := make([]uint8, 4096)

	ftp.command_conn, ftp.err = net.Dial("tcp", ftp.ip_port)
	if ftp.err != nil {
		logger.Fatal(ftp.err)
	}

	defer ftp.command_conn.Close()

	logger.Println("Connect Server: " + ftp.ip_port + " OK")

	/* need loop for read sock buf */
	read_len, err := ftp.command_conn.Read(data[:])
	if err != nil {
		logger.Fatal(err)
	}

	logger.Printf("Server Response:%d,%s", read_len, data[:read_len])

	ftpcmd("USER "+ftp.name, read_buf, ftp.command_conn)

	ftpcmd("PASS "+ftp.passwd, read_buf, ftp.command_conn)

	ftpcmd("SYST", read_buf, ftp.command_conn)

	ftpcmd("TYPE I", read_buf, ftp.command_conn)

	//ftpcmd("CWD /book/Linux-Unix/", read_buf, ftp.command_conn)

	//port download
	for i := 0; i < len(file_list); i++ {

		ftpcmd("CWD "+file_list[i].path, read_buf, ftp.command_conn)
		port_trans_file(file_list[i].name, &ftp)
	}

	//NLIST
	/* list dir*/

	/*
		ftpcmd("PASV", read_buf, ftp.command_conn)

		ftp.data_ip_port = get_ip_port(string(read_buf))

		ftpcmd("CWD /pub/FreeBSD", read_buf, ftp.command_conn)
		ftpcmd("NLST", read_buf, ftp.command_conn)
		pasv_trans_file(ftp, "TortoiseSVN-1.7.6.22632-win32-svn-1.7.4.msi")

	*/
	//download README.TXT

	/*
		ftpcmd("PASV", read_buf, ftp.command_conn)

		ftp.data_ip_port = get_ip_port(string(read_buf))

		ftpcmd("RETR README.TXT", read_buf, ftp.command_conn)

		pasv_trans_file(ftp, "README.TXT")

	*/

	//ftpcmd("TYPE A",read_buf,ftp.command_conn)

	//ftpcmd("LIST /",read_buf,ftp.command_conn)
	//ftpcmd("PWD ",read_buf,ftp.command_conn)
	//ftpcmd("XPWD ", read_buf, ftp.command_conn)

	ftpcmd("QUIT", read_buf, ftp.command_conn)

	return
}
